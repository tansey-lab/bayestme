dag {
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag.html"
    overwrite = true
}

trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_trace.txt"
    fields = 'task_id,name,status,exit,realtime,%cpu,rss'
    overwrite = true
}

report {
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_report.html"
    overwrite = true
}

process {
    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = 'retry'
    maxRetries    = 3
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // TODO nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 96.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withLabel:gpu {
        accelerator = 1
        clusterOptions = { getGpuClusterOptions( task.executor ) }
        containerOptions = {
            workflow.containerEngine == "singularity" ?
                '--nv': ( workflow.containerEngine == "docker" ?
                    '--gpus all': ( workflow.containerEngine == "podman" ?
                        '--device nvidia.com/gpu=all' : null ) ) }
    }
}
